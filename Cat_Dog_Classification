{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    }
   ],
   "source": [
    "from keras.models import Sequential\n",
    "from keras.layers import Convolution2D\n",
    "from keras.layers import MaxPooling2D\n",
    "from keras.layers import Flatten\n",
    "from keras.layers import Dense"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "classifier=Sequential()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Gayatri\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:1: UserWarning: Update your `Conv2D` call to the Keras 2 API: `Conv2D(32, (3, 3), input_shape=(64, 64, 3..., activation=\"relu\")`\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n"
     ]
    }
   ],
   "source": [
    "classifier.add(Convolution2D(32,3,3,input_shape=(64,64,3),activation='relu'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "classifier.add(MaxPooling2D(pool_size=(2,2)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "classifier.add(Flatten())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Gayatri\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:1: UserWarning: Update your `Dense` call to the Keras 2 API: `Dense(activation=\"relu\", units=128)`\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n"
     ]
    }
   ],
   "source": [
    "classifier.add(Dense(output_dim=128,activation='relu'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Gayatri\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:1: UserWarning: Update your `Dense` call to the Keras 2 API: `Dense(activation=\"sigmoid\", units=1)`\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n"
     ]
    }
   ],
   "source": [
    "classifier.add(Dense(output_dim=1,activation='sigmoid'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "classifier.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "from keras.preprocessing.image import ImageDataGenerator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_datagen=ImageDataGenerator(rescale=1./255,\n",
    "                                shear_range=0.2,\n",
    "                                zoom_range=0.2,\n",
    "                                 horizontal_flip=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_datagen=ImageDataGenerator(rescale=1./255)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 8005 images belonging to 2 classes.\n"
     ]
    }
   ],
   "source": [
    "training_set=train_datagen.flow_from_directory('dataset/training_set',\n",
    "                                                target_size=(64,64),\n",
    "                                                batch_size=3,\n",
    "                                                class_mode='binary')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 2023 images belonging to 2 classes.\n"
     ]
    }
   ],
   "source": [
    "test_set=test_datagen.flow_from_directory('dataset/test_set',\n",
    "                                        target_size=(64,64),\n",
    "                                        batch_size=3,\n",
    "                                        class_mode='binary')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Gayatri\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:5: UserWarning: The semantics of the Keras 2 argument `steps_per_epoch` is not the same as the Keras 1 argument `samples_per_epoch`. `steps_per_epoch` is the number of batches to draw from the generator at each epoch. Basically steps_per_epoch = samples_per_epoch/batch_size. Similarly `nb_val_samples`->`validation_steps` and `val_samples`->`steps` arguments have changed. Update your method calls accordingly.\n",
      "  \"\"\"\n",
      "C:\\Users\\Gayatri\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:5: UserWarning: Update your `fit_generator` call to the Keras 2 API: `fit_generator(<keras_pre..., validation_data=<keras_pre..., steps_per_epoch=2666, epochs=25, validation_steps=2000)`\n",
      "  \"\"\"\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/25\n",
      "2666/2666 [==============================] - 531s 199ms/step - loss: 0.6769 - acc: 0.5933 - val_loss: 0.7859 - val_acc: 0.5040\n",
      "Epoch 2/25\n",
      "2666/2666 [==============================] - 461s 173ms/step - loss: 0.6224 - acc: 0.6572 - val_loss: 0.6067 - val_acc: 0.6713\n",
      "Epoch 3/25\n",
      "2666/2666 [==============================] - 469s 176ms/step - loss: 0.5914 - acc: 0.6900 - val_loss: 0.5965 - val_acc: 0.6874\n",
      "Epoch 4/25\n",
      "2666/2666 [==============================] - 471s 177ms/step - loss: 0.5727 - acc: 0.7039 - val_loss: 0.5776 - val_acc: 0.7027\n",
      "Epoch 5/25\n",
      "2666/2666 [==============================] - 466s 175ms/step - loss: 0.5536 - acc: 0.7174 - val_loss: 0.5593 - val_acc: 0.7207\n",
      "Epoch 6/25\n",
      "2666/2666 [==============================] - 467s 175ms/step - loss: 0.5346 - acc: 0.7309 - val_loss: 0.5964 - val_acc: 0.6995\n",
      "Epoch 7/25\n",
      "2666/2666 [==============================] - 469s 176ms/step - loss: 0.5239 - acc: 0.7398 - val_loss: 0.5685 - val_acc: 0.7336\n",
      "Epoch 8/25\n",
      "2666/2666 [==============================] - 460s 173ms/step - loss: 0.5090 - acc: 0.7539 - val_loss: 0.5897 - val_acc: 0.7132\n",
      "Epoch 9/25\n",
      "2666/2666 [==============================] - 450s 169ms/step - loss: 0.4954 - acc: 0.7607 - val_loss: 0.5434 - val_acc: 0.7272loss: 0.4957 - acc: 0\n",
      "Epoch 10/25\n",
      "2666/2666 [==============================] - 501s 188ms/step - loss: 0.4792 - acc: 0.7646 - val_loss: 0.5581 - val_acc: 0.7396\n",
      "Epoch 11/25\n",
      "2666/2666 [==============================] - 515s 193ms/step - loss: 0.4639 - acc: 0.7781 - val_loss: 0.6438 - val_acc: 0.7037\n",
      "Epoch 12/25\n",
      "2666/2666 [==============================] - 468s 175ms/step - loss: 0.4578 - acc: 0.7827 - val_loss: 0.5529 - val_acc: 0.7404\n",
      "Epoch 13/25\n",
      "2666/2666 [==============================] - 465s 174ms/step - loss: 0.4382 - acc: 0.7924 - val_loss: 0.6067 - val_acc: 0.7184\n",
      "Epoch 14/25\n",
      "2666/2666 [==============================] - 663s 249ms/step - loss: 0.4314 - acc: 0.7993 - val_loss: 0.6283 - val_acc: 0.7192\n",
      "Epoch 15/25\n",
      "2666/2666 [==============================] - 448s 168ms/step - loss: 0.4207 - acc: 0.8090 - val_loss: 0.6206 - val_acc: 0.7326\n",
      "Epoch 16/25\n",
      "2666/2666 [==============================] - 451s 169ms/step - loss: 0.4011 - acc: 0.8178 - val_loss: 0.6428 - val_acc: 0.7204\n",
      "Epoch 17/25\n",
      "2666/2666 [==============================] - 447s 168ms/step - loss: 0.3978 - acc: 0.8197 - val_loss: 0.6535 - val_acc: 0.7372\n",
      "Epoch 18/25\n",
      "2666/2666 [==============================] - 515s 193ms/step - loss: 0.3835 - acc: 0.8312 - val_loss: 0.6282 - val_acc: 0.7404\n",
      "Epoch 19/25\n",
      "2666/2666 [==============================] - 664s 249ms/step - loss: 0.3750 - acc: 0.8298 - val_loss: 0.6462 - val_acc: 0.7377\n",
      "Epoch 20/25\n",
      "2666/2666 [==============================] - 1175s 441ms/step - loss: 0.3782 - acc: 0.8323 - val_loss: 0.6630 - val_acc: 0.7434\n",
      "Epoch 21/25\n",
      "2666/2666 [==============================] - 628s 236ms/step - loss: 0.3623 - acc: 0.8407 - val_loss: 0.7306 - val_acc: 0.7341\n",
      "Epoch 22/25\n",
      "2666/2666 [==============================] - 461s 173ms/step - loss: 0.3458 - acc: 0.8490 - val_loss: 0.7552 - val_acc: 0.7421\n",
      "Epoch 23/25\n",
      "2666/2666 [==============================] - 469s 176ms/step - loss: 0.3424 - acc: 0.8496 - val_loss: 0.6550 - val_acc: 0.7336\n",
      "Epoch 24/25\n",
      "2666/2666 [==============================] - 545s 204ms/step - loss: 0.3188 - acc: 0.8595 - val_loss: 0.7528 - val_acc: 0.7212\n",
      "Epoch 25/25\n",
      "2666/2666 [==============================] - 521s 195ms/step - loss: 0.3339 - acc: 0.8557 - val_loss: 0.7072 - val_acc: 0.7289\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0xa8be3cfc50>"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "classifier.fit_generator(training_set,\n",
    "                        samples_per_epoch=8000,\n",
    "                        nb_epoch=25,\n",
    "                        validation_data=test_set,\n",
    "                        nb_val_samples=2000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from keras.preprocessing import image\n",
    "test_image=image.load_img('dataset/single_prediction/cat_or_dog.jpg',target_size=(64,64))\n",
    "test_image=image.img_to_array(test_image)\n",
    "test_image=np.expand_dims(test_image,axis=0)\n",
    "result=classifier.predict(test_image)\n",
    "training_set.class_indices\n",
    "if result[0][0]==1:\n",
    "    prediction='dog'\n",
    "else:\n",
    "    prediction='cat'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'cat'"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
